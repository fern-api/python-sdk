types:
  Yank:
    properties:
      remediation_verision:
        type: optional<string>
        docs: >
          The remediation strategy to be used when a yank is detected. If one is
          not specified, we'll likely go backwards by publishing time

          to find the last unyanked version.
    docs: >-
      A yank is a metadata object that declares if a version is safe to upgrade
      to, if present the answer is no.
  GetChangelogResponse:
    properties:
      entries: list<ChangelogResponse>
  ChangelogResponse:
    properties:
      version: string
      changelog_entry: ChangelogEntry
  ChangelogEntryType:
    enum:
      - fix
      - feat
      - chore
      - refactor
      - perf
    docs: Following `conventional commit` types for the entries here.
  ChangelogEntry:
    properties:
      type: ChangelogEntryType
      added: optional<list<string>>
      changed: optional<list<string>>
      deprecated: optional<list<string>>
      removed: optional<list<string>>
      fixed: optional<list<string>>
      security: optional<list<string>>
    docs: >-
      Following `keep a changelog` format for the entries here. These are
      effectively your release notes.
  ReleaseType:
    enum:
      - GA
      - RC
  ReleaseRequest:
    properties:
      version: string
      created_at: optional<date>
      is_yanked: optional<Yank>
      changelog_entry: optional<ChangelogEntry>
  Release:
    extends: ReleaseRequest
    properties:
      release_type: ReleaseType
      major_version: integer
  InvalidVersionErrorMessage:
    properties:
      provided_version: string
  InvalidIrVersionErrorMessage:
    properties:
      provided_version: integer
errors:
  InvalidVersionError:
    status-code: 400
    type: InvalidVersionErrorMessage
