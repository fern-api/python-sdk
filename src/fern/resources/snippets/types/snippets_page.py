# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .endpoint_path import EndpointPath
from .snippets_by_endpoint_method import SnippetsByEndpointMethod

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SnippetsPage(pydantic.BaseModel):
    next: typing.Optional[str] = pydantic.Field(
        description="If present, pass this into the `page` query parameter to load the next page."
    )
    snippets: typing.Dict[EndpointPath, SnippetsByEndpointMethod] = pydantic.Field(
        description=(
            "The snippets are returned as a map of endpoint path (e.g. `/api/users`) \n"
            "to a map of endpoint method (e.g. `POST`) to snippets. \n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
