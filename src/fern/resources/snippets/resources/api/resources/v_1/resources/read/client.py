# This file was auto-generated by Fern from our API Definition.

import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .........core.api_error import ApiError
from .........core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ......commons.types.api_definition_id import ApiDefinitionId
from .errors.api_does_not_exist_error import ApiDoesNotExistError
from .types.api_definition import ApiDefinition


class ReadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_api(self, api_definition_id: ApiDefinitionId) -> ApiDefinition:
        """
        Parameters:
            - api_definition_id: ApiDefinitionId.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"registry/api/load/{api_definition_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiDefinition, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "ApiDoesNotExistError":
                raise ApiDoesNotExistError()
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncReadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_api(self, api_definition_id: ApiDefinitionId) -> ApiDefinition:
        """
        Parameters:
            - api_definition_id: ApiDefinitionId.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"registry/api/load/{api_definition_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiDefinition, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "ApiDoesNotExistError":
                raise ApiDoesNotExistError()
        raise ApiError(status_code=_response.status_code, body=_response_json)
