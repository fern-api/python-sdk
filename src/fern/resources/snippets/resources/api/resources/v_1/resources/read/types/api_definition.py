# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..........core.datetime_utils import serialize_datetime
from .......commons.types.api_definition_id import ApiDefinitionId
from ..resources.type.types.type_definition import TypeDefinition
from ..resources.type.types.type_id import TypeId
from .api_auth import ApiAuth
from .api_definition_package import ApiDefinitionPackage
from .api_definition_subpackage import ApiDefinitionSubpackage
from .subpackage_id import SubpackageId


class ApiDefinition(pydantic.BaseModel):
    id: ApiDefinitionId
    root_package: ApiDefinitionPackage = pydantic.Field(alias="rootPackage")
    types: typing.Dict[TypeId, TypeDefinition]
    subpackages: typing.Dict[SubpackageId, ApiDefinitionSubpackage]
    auth: typing.Optional[ApiAuth]
    has_multiple_base_urls: typing.Optional[bool] = pydantic.Field(
        alias="hasMultipleBaseUrls",
        description=(
            "If empty, assume false. \n"
            "Whether or not endpoints are being served at different \n"
            "base urls (i.e. https://a.com and https://b.com)\n"
        ),
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
