# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .........core.api_error import ApiError
from .........core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .........core.jsonable_encoder import jsonable_encoder
from ......commons.errors.unauthorized_error import UnauthorizedError
from ......commons.errors.user_not_in_org_error import UserNotInOrgError
from ......commons.types.api_id import ApiId
from ......commons.types.org_id import OrgId
from .types.api_definition import ApiDefinition
from .types.register_api_definition_response import RegisterApiDefinitionResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RegisterClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def register_api_definition(
        self, *, org_id: OrgId, api_id: ApiId, definition: ApiDefinition
    ) -> RegisterApiDefinitionResponse:
        """
        Parameters:
            - org_id: OrgId.

            - api_id: ApiId.

            - definition: ApiDefinition.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "registry/api/register"),
            json=jsonable_encoder({"orgId": org_id, "apiId": api_id, "definition": definition}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RegisterApiDefinitionResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError()
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError()
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRegisterClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def register_api_definition(
        self, *, org_id: OrgId, api_id: ApiId, definition: ApiDefinition
    ) -> RegisterApiDefinitionResponse:
        """
        Parameters:
            - org_id: OrgId.

            - api_id: ApiId.

            - definition: ApiDefinition.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "registry/api/register"),
            json=jsonable_encoder({"orgId": org_id, "apiId": api_id, "definition": definition}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RegisterApiDefinitionResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError()
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError()
        raise ApiError(status_code=_response.status_code, body=_response_json)
