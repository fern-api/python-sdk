# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ............core.datetime_utils import serialize_datetime
from .....read.resources.commons.types.with_description import WithDescription
from .....read.resources.endpoint.types.availability import Availability
from .....read.resources.endpoint.types.endpoint_id import EndpointId
from .....read.resources.endpoint.types.endpoint_path import EndpointPath
from .....read.resources.endpoint.types.environment import Environment
from .....read.resources.endpoint.types.environment_id import EnvironmentId
from .....read.resources.endpoint.types.error_declaration import ErrorDeclaration
from .....read.resources.endpoint.types.error_declaration_v_2 import ErrorDeclarationV2
from .....read.resources.endpoint.types.example_endpoint_call import ExampleEndpointCall
from .....read.resources.endpoint.types.header import Header
from .....read.resources.endpoint.types.http_method import HttpMethod
from .....read.resources.endpoint.types.http_response import HttpResponse
from .....read.resources.endpoint.types.query_parameter import QueryParameter
from .db_http_request import DbHttpRequest


class DbEndpointDefinition(WithDescription):
    authed: typing.Optional[bool]
    availability: typing.Optional[Availability]
    default_environment: typing.Optional[EnvironmentId] = pydantic.Field(alias="defaultEnvironment")
    environments: typing.Optional[typing.List[Environment]]
    method: HttpMethod
    id: EndpointId
    url_slug: str = pydantic.Field(alias="urlSlug")
    name: typing.Optional[str]
    path: EndpointPath
    query_parameters: typing.List[QueryParameter] = pydantic.Field(alias="queryParameters")
    headers: typing.List[Header]
    request: typing.Optional[DbHttpRequest]
    response: typing.Optional[HttpResponse]
    errors: typing.Optional[typing.List[ErrorDeclaration]]
    errors_v_2: typing.Optional[typing.List[ErrorDeclarationV2]] = pydantic.Field(alias="errorsV2")
    examples: typing.List[ExampleEndpointCall]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
