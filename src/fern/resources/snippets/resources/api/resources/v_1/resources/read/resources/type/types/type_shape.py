# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .discriminated_union_type import DiscriminatedUnionType
from .enum_type import EnumType
from .object_type import ObjectType
from .undiscriminated_union_type import UndiscriminatedUnionType


class TypeShape_Alias(pydantic.BaseModel):
    type: typing_extensions.Literal["alias"]
    value: TypeReference

    class Config:
        frozen = True
        smart_union = True


class TypeShape_Enum(EnumType):
    type: typing_extensions.Literal["enum"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class TypeShape_UndiscriminatedUnion(UndiscriminatedUnionType):
    type: typing_extensions.Literal["undiscriminatedUnion"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class TypeShape_DiscriminatedUnion(DiscriminatedUnionType):
    type: typing_extensions.Literal["discriminatedUnion"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class TypeShape_Object(ObjectType):
    type: typing_extensions.Literal["object"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


TypeShape = typing.Union[
    TypeShape_Alias, TypeShape_Enum, TypeShape_UndiscriminatedUnion, TypeShape_DiscriminatedUnion, TypeShape_Object
]
from .type_reference import TypeReference  # noqa: E402
