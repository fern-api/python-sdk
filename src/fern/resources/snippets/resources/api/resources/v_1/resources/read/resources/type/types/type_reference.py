# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .literal_type import LiteralType
from .primitive_type import PrimitiveType
from .type_id import TypeId


class TypeReference_Id(pydantic.BaseModel):
    type: typing_extensions.Literal["id"]
    value: TypeId

    class Config:
        frozen = True
        smart_union = True


class TypeReference_Primitive(pydantic.BaseModel):
    type: typing_extensions.Literal["primitive"]
    value: PrimitiveType

    class Config:
        frozen = True
        smart_union = True


class TypeReference_Optional(OptionalType):
    type: typing_extensions.Literal["optional"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class TypeReference_List(ListType):
    type: typing_extensions.Literal["list"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class TypeReference_Set(SetType):
    type: typing_extensions.Literal["set"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class TypeReference_Map(MapType):
    type: typing_extensions.Literal["map"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class TypeReference_Literal(pydantic.BaseModel):
    type: typing_extensions.Literal["literal"]
    value: LiteralType

    class Config:
        frozen = True
        smart_union = True


class TypeReference_Unknown(pydantic.BaseModel):
    type: typing_extensions.Literal["unknown"]

    class Config:
        frozen = True
        smart_union = True


TypeReference = typing.Union[
    TypeReference_Id,
    TypeReference_Primitive,
    TypeReference_Optional,
    TypeReference_List,
    TypeReference_Set,
    TypeReference_Map,
    TypeReference_Literal,
    TypeReference_Unknown,
]
from .list_type import ListType  # noqa: E402
from .map_type import MapType  # noqa: E402
from .optional_type import OptionalType  # noqa: E402
from .set_type import SetType  # noqa: E402

TypeReference_Optional.update_forward_refs(
    ListType=ListType, MapType=MapType, OptionalType=OptionalType, SetType=SetType, TypeReference=TypeReference
)
TypeReference_List.update_forward_refs(
    ListType=ListType, MapType=MapType, OptionalType=OptionalType, SetType=SetType, TypeReference=TypeReference
)
TypeReference_Set.update_forward_refs(
    ListType=ListType, MapType=MapType, OptionalType=OptionalType, SetType=SetType, TypeReference=TypeReference
)
TypeReference_Map.update_forward_refs(
    ListType=ListType, MapType=MapType, OptionalType=OptionalType, SetType=SetType, TypeReference=TypeReference
)
