# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .........core.api_error import ApiError
from .........core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .........core.jsonable_encoder import jsonable_encoder
from ......commons.types.docs_config_id import DocsConfigId
from .errors.docs_definition_not_found_error import DocsDefinitionNotFoundError
from .errors.domain_not_registered_error import DomainNotRegisteredError
from .errors.index_segment_not_found_error import IndexSegmentNotFoundError
from .types.get_docs_config_by_id_response import GetDocsConfigByIdResponse
from .types.get_search_api_key_for_index_segment_response import GetSearchApiKeyForIndexSegmentResponse
from .types.load_docs_for_url_response import LoadDocsForUrlResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_docs_for_url(self, *, url: str) -> LoadDocsForUrlResponse:
        """
        Parameters:
            - url: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/registry/docs/load-with-url"),
            json=jsonable_encoder({"url": url}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LoadDocsForUrlResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_docs_config_by_id(self, docs_config_id: DocsConfigId) -> GetDocsConfigByIdResponse:
        """
        Loads the Docs Config and any referenced APIs by ID.

        Parameters:
            - docs_config_id: DocsConfigId.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/registry/docs/{docs_config_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetDocsConfigByIdResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "DocsDefinitionNotFoundError":
                raise DocsDefinitionNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_search_api_key_for_index_segment(self, *, index_segment_id: str) -> GetSearchApiKeyForIndexSegmentResponse:
        """
        Parameters:
            - index_segment_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", "v2/registry/docs/search-api-key-with-index-segment"
            ),
            json=jsonable_encoder({"indexSegmentId": index_segment_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSearchApiKeyForIndexSegmentResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "IndexSegmentNotFoundError":
                raise IndexSegmentNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncReadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_docs_for_url(self, *, url: str) -> LoadDocsForUrlResponse:
        """
        Parameters:
            - url: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/registry/docs/load-with-url"),
            json=jsonable_encoder({"url": url}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LoadDocsForUrlResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_docs_config_by_id(self, docs_config_id: DocsConfigId) -> GetDocsConfigByIdResponse:
        """
        Loads the Docs Config and any referenced APIs by ID.

        Parameters:
            - docs_config_id: DocsConfigId.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/registry/docs/{docs_config_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetDocsConfigByIdResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "DocsDefinitionNotFoundError":
                raise DocsDefinitionNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_search_api_key_for_index_segment(
        self, *, index_segment_id: str
    ) -> GetSearchApiKeyForIndexSegmentResponse:
        """
        Parameters:
            - index_segment_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", "v2/registry/docs/search-api-key-with-index-segment"
            ),
            json=jsonable_encoder({"indexSegmentId": index_segment_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSearchApiKeyForIndexSegmentResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "IndexSegmentNotFoundError":
                raise IndexSegmentNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)
