# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .........core.api_error import ApiError
from .........core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .........core.jsonable_encoder import jsonable_encoder
from ......commons.errors.unauthorized_error import UnauthorizedError
from ......commons.errors.user_not_in_org_error import UserNotInOrgError
from ......commons.types.api_id import ApiId
from ......commons.types.org_id import OrgId
from ....v_1.resources.write.errors.docs_registration_id_not_found import DocsRegistrationIdNotFound
from ....v_1.resources.write.types.docs_definition import DocsDefinition
from ....v_1.resources.write.types.docs_registration_id import DocsRegistrationId
from ....v_1.resources.write.types.file_path import FilePath
from ....v_1.resources.write.types.start_docs_register_response import StartDocsRegisterResponse
from .errors.invalid_custom_domain_error import InvalidCustomDomainError
from .errors.invalid_domain_error import InvalidDomainError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WriteClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def start_docs_register(
        self,
        *,
        domain: str,
        custom_domains: typing.List[str],
        org_id: OrgId,
        api_id: ApiId,
        filepaths: typing.List[FilePath],
    ) -> StartDocsRegisterResponse:
        """
        Parameters:
            - domain: str. A `buildwithfern.com` url

            - custom_domains: typing.List[str].

            - org_id: OrgId.

            - api_id: ApiId.

            - filepaths: typing.List[FilePath]. Relative filepath from docs folder.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/registry/docs/v2/init"),
            json=jsonable_encoder(
                {
                    "domain": domain,
                    "customDomains": custom_domains,
                    "orgId": org_id,
                    "apiId": api_id,
                    "filepaths": filepaths,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(StartDocsRegisterResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "InvalidDomainError":
                raise InvalidDomainError()
            if _response_json["error"] == "InvalidCustomDomainError":
                raise InvalidCustomDomainError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def finish_docs_register(
        self, docs_registration_id: DocsRegistrationId, *, docs_definition: DocsDefinition
    ) -> None:
        """
        Parameters:
            - docs_registration_id: DocsRegistrationId.

            - docs_definition: DocsDefinition.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v2/registry/docs/register/{docs_registration_id}"
            ),
            json=jsonable_encoder({"docsDefinition": docs_definition}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError()
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError()
            if _response_json["error"] == "DocsRegistrationIdNotFound":
                raise DocsRegistrationIdNotFound()
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWriteClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def start_docs_register(
        self,
        *,
        domain: str,
        custom_domains: typing.List[str],
        org_id: OrgId,
        api_id: ApiId,
        filepaths: typing.List[FilePath],
    ) -> StartDocsRegisterResponse:
        """
        Parameters:
            - domain: str. A `buildwithfern.com` url

            - custom_domains: typing.List[str].

            - org_id: OrgId.

            - api_id: ApiId.

            - filepaths: typing.List[FilePath]. Relative filepath from docs folder.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/registry/docs/v2/init"),
            json=jsonable_encoder(
                {
                    "domain": domain,
                    "customDomains": custom_domains,
                    "orgId": org_id,
                    "apiId": api_id,
                    "filepaths": filepaths,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(StartDocsRegisterResponse, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "InvalidDomainError":
                raise InvalidDomainError()
            if _response_json["error"] == "InvalidCustomDomainError":
                raise InvalidCustomDomainError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def finish_docs_register(
        self, docs_registration_id: DocsRegistrationId, *, docs_definition: DocsDefinition
    ) -> None:
        """
        Parameters:
            - docs_registration_id: DocsRegistrationId.

            - docs_definition: DocsDefinition.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v2/registry/docs/register/{docs_registration_id}"
            ),
            json=jsonable_encoder({"docsDefinition": docs_definition}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError()
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError()
            if _response_json["error"] == "DocsRegistrationIdNotFound":
                raise DocsRegistrationIdNotFound()
        raise ApiError(status_code=_response.status_code, body=_response_json)
