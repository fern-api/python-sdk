# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .........core.api_error import ApiError
from .........core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .........core.jsonable_encoder import jsonable_encoder
from .errors.domain_not_registered_error import DomainNotRegisteredError
from .types.docs_definition import DocsDefinition

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_docs_for_domain_legacy(self, domain: str) -> DocsDefinition:
        """
        Parameters:
            - domain: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"registry/docs/load/{domain}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocsDefinition, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_docs_for_domain(self, *, domain: str) -> DocsDefinition:
        """
        Parameters:
            - domain: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "registry/docs/load"),
            json=jsonable_encoder({"domain": domain}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocsDefinition, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError()
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncReadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_docs_for_domain_legacy(self, domain: str) -> DocsDefinition:
        """
        Parameters:
            - domain: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"registry/docs/load/{domain}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocsDefinition, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_docs_for_domain(self, *, domain: str) -> DocsDefinition:
        """
        Parameters:
            - domain: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "registry/docs/load"),
            json=jsonable_encoder({"domain": domain}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocsDefinition, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError()
        raise ApiError(status_code=_response.status_code, body=_response_json)
