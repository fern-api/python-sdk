# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..........core.datetime_utils import serialize_datetime
from .......api.resources.v_1.resources.read.types.api_definition import ApiDefinition
from .......commons.types.api_definition_id import ApiDefinitionId
from .......commons.types.docs_config_id import DocsConfigId
from .algolia_search_index import AlgoliaSearchIndex
from .docs_config import DocsConfig
from .file_id import FileId
from .page_content import PageContent
from .page_id import PageId
from .search_info import SearchInfo
from .url import Url


class DocsDefinition(pydantic.BaseModel):
    algolia_search_index: typing.Optional[AlgoliaSearchIndex] = pydantic.Field(alias="algoliaSearchIndex")
    pages: typing.Dict[PageId, PageContent]
    apis: typing.Dict[ApiDefinitionId, ApiDefinition]
    files: typing.Dict[FileId, Url]
    id: typing.Optional[DocsConfigId]
    config: DocsConfig
    search: SearchInfo

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
