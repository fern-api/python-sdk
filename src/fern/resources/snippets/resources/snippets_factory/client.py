# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from ...errors.api_id_not_found import ApiIdNotFound
from ...errors.org_id_not_found import OrgIdNotFound
from ...errors.sdk_not_found import SdkNotFound
from ..commons.types.api_id import ApiId
from ..commons.types.org_id import OrgId
from .types.sdk_snippets_create import SdkSnippetsCreate

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SnippetsFactoryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_snippets_for_sdk(self, *, org_id: OrgId, api_id: ApiId, snippets: SdkSnippetsCreate) -> None:
        """
        Store endpoint snippets for a particular SDK.

        Parameters:
            - org_id: OrgId. The organization to create snippets for.

            - api_id: ApiId. The API name.

            - snippets: SdkSnippetsCreate.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snippets/create"),
            json=jsonable_encoder({"orgId": org_id, "apiId": api_id, "snippets": snippets}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "SDKNotFound":
                raise SdkNotFound()
            if _response_json["error"] == "ApiIdNotFound":
                raise ApiIdNotFound()
            if _response_json["error"] == "OrgIdNotFound":
                raise OrgIdNotFound()
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSnippetsFactoryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_snippets_for_sdk(self, *, org_id: OrgId, api_id: ApiId, snippets: SdkSnippetsCreate) -> None:
        """
        Store endpoint snippets for a particular SDK.

        Parameters:
            - org_id: OrgId. The organization to create snippets for.

            - api_id: ApiId. The API name.

            - snippets: SdkSnippetsCreate.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snippets/create"),
            json=jsonable_encoder({"orgId": org_id, "apiId": api_id, "snippets": snippets}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "SDKNotFound":
                raise SdkNotFound()
            if _response_json["error"] == "ApiIdNotFound":
                raise ApiIdNotFound()
            if _response_json["error"] == "OrgIdNotFound":
                raise OrgIdNotFound()
        raise ApiError(status_code=_response.status_code, body=_response_json)
