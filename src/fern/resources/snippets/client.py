# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...core.request_options import RequestOptions
from ..commons.types.api_id import ApiId
from ..commons.types.org_id import OrgId
from .types.endpoint_identifier import EndpointIdentifier
from .types.sdk import Sdk
from .types.snippet import Snippet
from .types.snippet_load_level import SnippetLoadLevel
from .types.snippets_page import SnippetsPage

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SnippetsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self,
        *,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[Sdk]] = OMIT,
        load_level: typing.Optional[SnippetLoadLevel] = OMIT,
        endpoint: EndpointIdentifier,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Snippet]:
        """
        Get snippet by endpoint method and path

        Parameters:
            - org_id: typing.Optional[OrgId]. If the same API is defined across multiple organization,
                                              you must specify an organization ID.

            - api_id: typing.Optional[ApiId]. If you have more than one API, you must specify its ID.

            - sdks: typing.Optional[typing.Sequence[Sdk]]. The SDKs for which to load snippets. If unspecified,
                                                           snippets for the latest published SDKs will be returned.

            - load_level: typing.Optional[SnippetLoadLevel]. The level of detail to load for the snippet. If unspecified,
                                                             the full snippet will be returned.

            - endpoint: EndpointIdentifier.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from fern.client import Fern

        from fern import EndpointIdentifier, EndpointMethod

        client = Fern(
            token="YOUR_TOKEN",
        )
        client.snippets.get(
            endpoint=EndpointIdentifier(
                method=EndpointMethod.GET,
                path="/v1/search",
            ),
        )
        """
        _request: typing.Dict[str, typing.Any] = {"endpoint": endpoint}
        if org_id is not OMIT:
            _request["orgId"] = org_id
        if api_id is not OMIT:
            _request["apiId"] = api_id
        if sdks is not OMIT:
            _request["sdks"] = sdks
        if load_level is not OMIT:
            _request["loadLevel"] = load_level
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snippets"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Snippet], _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def load(
        self,
        *,
        page: typing.Optional[int] = None,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[Sdk]] = OMIT,
        load_level: typing.Optional[SnippetLoadLevel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnippetsPage:
        """
        Parameters:
            - page: typing.Optional[int].

            - org_id: typing.Optional[OrgId]. If the same API is defined across multiple organization,
                                              you must specify an organization ID.

            - api_id: typing.Optional[ApiId]. If you have more than one API, you must specify its ID.

            - sdks: typing.Optional[typing.Sequence[Sdk]]. The SDKs for which to load snippets. If unspecified,
                                                           snippets for the latest published SDKs will be returned.

            - load_level: typing.Optional[SnippetLoadLevel]. The level of detail to load for the snippet. If unspecified,
                                                             the full snippet will be returned.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from fern.client import Fern

        from fern import Sdk_Python

        client = Fern(
            token="YOUR_TOKEN",
        )
        client.snippets.load(
            page=1,
            org_id="vellum",
            api_id="vellum-ai",
            sdks=[
                Sdk_Python(
                    type="python",
                    package="vellum-ai",
                    version="1.2.1",
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if org_id is not OMIT:
            _request["orgId"] = org_id
        if api_id is not OMIT:
            _request["apiId"] = api_id
        if sdks is not OMIT:
            _request["sdks"] = sdks
        if load_level is not OMIT:
            _request["loadLevel"] = load_level
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snippets/load"),
            params=jsonable_encoder(
                remove_none_from_dict(
                    {
                        "page": page,
                        **(
                            request_options.get("additional_query_parameters", {})
                            if request_options is not None
                            else {}
                        ),
                    }
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnippetsPage, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSnippetsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self,
        *,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[Sdk]] = OMIT,
        load_level: typing.Optional[SnippetLoadLevel] = OMIT,
        endpoint: EndpointIdentifier,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Snippet]:
        """
        Get snippet by endpoint method and path

        Parameters:
            - org_id: typing.Optional[OrgId]. If the same API is defined across multiple organization,
                                              you must specify an organization ID.

            - api_id: typing.Optional[ApiId]. If you have more than one API, you must specify its ID.

            - sdks: typing.Optional[typing.Sequence[Sdk]]. The SDKs for which to load snippets. If unspecified,
                                                           snippets for the latest published SDKs will be returned.

            - load_level: typing.Optional[SnippetLoadLevel]. The level of detail to load for the snippet. If unspecified,
                                                             the full snippet will be returned.

            - endpoint: EndpointIdentifier.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from fern.client import AsyncFern

        from fern import EndpointIdentifier, EndpointMethod

        client = AsyncFern(
            token="YOUR_TOKEN",
        )
        await client.snippets.get(
            endpoint=EndpointIdentifier(
                method=EndpointMethod.GET,
                path="/v1/search",
            ),
        )
        """
        _request: typing.Dict[str, typing.Any] = {"endpoint": endpoint}
        if org_id is not OMIT:
            _request["orgId"] = org_id
        if api_id is not OMIT:
            _request["apiId"] = api_id
        if sdks is not OMIT:
            _request["sdks"] = sdks
        if load_level is not OMIT:
            _request["loadLevel"] = load_level
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snippets"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Snippet], _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def load(
        self,
        *,
        page: typing.Optional[int] = None,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[Sdk]] = OMIT,
        load_level: typing.Optional[SnippetLoadLevel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnippetsPage:
        """
        Parameters:
            - page: typing.Optional[int].

            - org_id: typing.Optional[OrgId]. If the same API is defined across multiple organization,
                                              you must specify an organization ID.

            - api_id: typing.Optional[ApiId]. If you have more than one API, you must specify its ID.

            - sdks: typing.Optional[typing.Sequence[Sdk]]. The SDKs for which to load snippets. If unspecified,
                                                           snippets for the latest published SDKs will be returned.

            - load_level: typing.Optional[SnippetLoadLevel]. The level of detail to load for the snippet. If unspecified,
                                                             the full snippet will be returned.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from fern.client import AsyncFern

        from fern import Sdk_Python

        client = AsyncFern(
            token="YOUR_TOKEN",
        )
        await client.snippets.load(
            page=1,
            org_id="vellum",
            api_id="vellum-ai",
            sdks=[
                Sdk_Python(
                    type="python",
                    package="vellum-ai",
                    version="1.2.1",
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if org_id is not OMIT:
            _request["orgId"] = org_id
        if api_id is not OMIT:
            _request["apiId"] = api_id
        if sdks is not OMIT:
            _request["sdks"] = sdks
        if load_level is not OMIT:
            _request["loadLevel"] = load_level
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snippets/load"),
            params=jsonable_encoder(
                remove_none_from_dict(
                    {
                        "page": page,
                        **(
                            request_options.get("additional_query_parameters", {})
                            if request_options is not None
                            else {}
                        ),
                    }
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnippetsPage, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)
