# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...core.request_options import RequestOptions
from ..commons.types.org_id import OrgId
from ..commons.types.token_id import TokenId
from .types.generate_token_response import GenerateTokenResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate(
        self, *, org_id: OrgId, scope: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GenerateTokenResponse:
        """
        Generate a token

        Parameters:
            - org_id: OrgId. The organization to generate a token for.

            - scope: str. The scope of the token. Valid scopes include:
                            - admin
                            - sdk:read:{package_name}
            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from fern.client import Fern

        client = Fern(
            token="YOUR_TOKEN",
        )
        client.tokens.generate(
            org_id="orgId",
            scope="scope",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "tokens/generate"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"orgId": org_id, "scope": scope})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"orgId": org_id, "scope": scope}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GenerateTokenResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def revoke(
        self, *, org_id: OrgId, token_id: TokenId, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Revoke a token

        Parameters:
            - org_id: OrgId. The organization to create snippets for.

            - token_id: TokenId.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from fern.client import Fern

        client = Fern(
            token="YOUR_TOKEN",
        )
        client.tokens.revoke(
            org_id="orgId",
            token_id="tokenId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "tokens/revoke"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"orgId": org_id, "tokenId": token_id})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"orgId": org_id, "tokenId": token_id}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate(
        self, *, org_id: OrgId, scope: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GenerateTokenResponse:
        """
        Generate a token

        Parameters:
            - org_id: OrgId. The organization to generate a token for.

            - scope: str. The scope of the token. Valid scopes include:
                            - admin
                            - sdk:read:{package_name}
            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from fern.client import AsyncFern

        client = AsyncFern(
            token="YOUR_TOKEN",
        )
        await client.tokens.generate(
            org_id="orgId",
            scope="scope",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "tokens/generate"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"orgId": org_id, "scope": scope})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"orgId": org_id, "scope": scope}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GenerateTokenResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def revoke(
        self, *, org_id: OrgId, token_id: TokenId, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Revoke a token

        Parameters:
            - org_id: OrgId. The organization to create snippets for.

            - token_id: TokenId.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from fern.client import AsyncFern

        client = AsyncFern(
            token="YOUR_TOKEN",
        )
        await client.tokens.revoke(
            org_id="orgId",
            token_id="tokenId",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "tokens/revoke"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"orgId": org_id, "tokenId": token_id})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"orgId": org_id, "tokenId": token_id}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
