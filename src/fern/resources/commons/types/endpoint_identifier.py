# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .endpoint_method import EndpointMethod
from .endpoint_path import EndpointPath

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EndpointIdentifier(pydantic.BaseModel):
    path: EndpointPath
    method: EndpointMethod
    identifier_override: typing.Optional[str] = pydantic.Field(alias="identifierOverride", default=None)
    """
    The ID for the endpoint as declared within the IR, this is a unique name for the endpoint, whereas path and
    method are not (specifically for the fern definition, consider chat and chat stream). This is optional to 
    remain backcompat with old snippets of yore.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
